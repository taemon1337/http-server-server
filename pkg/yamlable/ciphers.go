package yamlable

import (
  "fmt"
  "crypto/tls"
)

type Ciphersuite uint16

const (
	TLS_RSA_WITH_RC4_128_SHA                     = Ciphersuite(tls.TLS_RSA_WITH_RC4_128_SHA)
	TLS_RSA_WITH_3DES_EDE_CBC_SHA                = Ciphersuite(tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA)
	TLS_RSA_WITH_AES_128_CBC_SHA                 = Ciphersuite(tls.TLS_RSA_WITH_AES_128_CBC_SHA)
	TLS_RSA_WITH_AES_256_CBC_SHA                 = Ciphersuite(tls.TLS_RSA_WITH_AES_256_CBC_SHA)
	TLS_RSA_WITH_AES_128_CBC_SHA256              = Ciphersuite(tls.TLS_RSA_WITH_AES_128_CBC_SHA256)
	TLS_RSA_WITH_AES_128_GCM_SHA256              = Ciphersuite(tls.TLS_RSA_WITH_AES_128_GCM_SHA256)
	TLS_RSA_WITH_AES_256_GCM_SHA384              = Ciphersuite(tls.TLS_RSA_WITH_AES_256_GCM_SHA384)
	TLS_ECDHE_ECDSA_WITH_RC4_128_SHA             = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA)
	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA         = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA)
	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA         = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA)
	TLS_ECDHE_RSA_WITH_RC4_128_SHA               = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA)
	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA          = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA)
	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA           = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)
	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA           = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA)
	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256      = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256)
	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256        = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256)
	TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256        = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)
	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256      = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
	TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384        = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)
	TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384      = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)
	TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256  = Ciphersuite(tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)
	TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = Ciphersuite(tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)
)

func CipherSuiteToString(cipher uint16) string {
  cs := Ciphersuite(cipher)
  switch cs {
    case TLS_RSA_WITH_RC4_128_SHA:
      return "TLS_RSA_WITH_RC4_128_SHA"
    case TLS_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
    case TLS_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_RSA_WITH_AES_128_CBC_SHA"
    case TLS_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_RSA_WITH_AES_256_CBC_SHA"
    case TLS_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_RSA_WITH_AES_128_CBC_SHA256"
    case TLS_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_RSA_WITH_AES_128_GCM_SHA256"
    case TLS_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_RSA_WITH_AES_256_GCM_SHA384"
    case TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
      return "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"
    case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
    case TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
    case TLS_ECDHE_RSA_WITH_RC4_128_SHA:
      return "TLS_ECDHE_RSA_WITH_RC4_128_SHA"
    case TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"
    case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
    case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
    case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
    case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
    case TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    case TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
    case TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
    case TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
    case TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"
    case TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
    default:
      return fmt.Sprintf("%d", cs)
  }
}
